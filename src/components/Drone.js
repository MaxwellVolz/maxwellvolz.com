/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 .\\models\\02-assets\\raybans.glb 
*/

import { useRef, Suspense } from 'react';
import { useLoader, useFrame } from '@react-three/fiber';
import { useGLTF, SpotLight, useVideoTexture, useTexture, useAspect, Line, Trail } from '@react-three/drei';
import { Object3D } from 'three'; // Import Object3D class from Three.js

export default function Drone(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF('/drone.glb')
  const spotlight_ref = useRef();

  const mesh_ref = useRef();
  const spotlightTarget = new Object3D();
  spotlightTarget.position.set(1.3, 4, -2.2); // Replace with your desired coordinates

  const radar1 = useRef();
  const radar2 = useRef();

  const radar1_target = new Object3D();
  radar1_target.position.set(1.5, 4.8, -2);

  const radar2_target = new Object3D();
  radar2_target.position.set(1.5, 4.8, -2);

  const radar1Position = new Object3D();
  radar1Position.position.set(1.5, 4.8, -2);


  useFrame(({ clock }) => {
    const a = clock.getElapsedTime();

    const radius = 50; // Adjust the radius of the circle here
    const speed = 0.5; // Adjust the speed of rotation here

    // Update position to move the mesh_ref in a circular path
    mesh_ref.current.position.x = Math.cos(a * speed) * radius;
    mesh_ref.current.position.z = Math.sin(-a * speed) * radius;

    // Calculate the angle to face the center of the circle
    const angle = a * speed + Math.PI; // Adding Math.PI to adjust the facing direction

    // Update rotation to face the center of the circle
    mesh_ref.current.rotation.y = angle;

    // Update spotlight target position
    radar1_target.position.copy(radar1.current.position);

    // Update radar target position
    radar1_target.position.copy(radar1.current.position);
    radar2_target.position.copy(radar2.current.position);
  });
  return (
    <group {...props} dispose={null}>
      <SpotLight
        ref={spotlight_ref}
        position={[.0, 7, -3.1]}
        intensity={1}
        angle={Math.PI / 7}
        penumbra={1}
        decay={1}
        distance={10}
        color="white"
        target={spotlightTarget} // Point the spotlight at the mesh_ref
      />
      <group ref={radar1} position={[1.71, 4.74, -2.21]}>
        <mesh scale={.01}>
          <boxGeometry />
          <meshStandardMaterial />
        </mesh>
      </group>
      <group ref={radar2} position={[1.52, 4.74, -1.79]}>
        <mesh scale={.01}>
          <boxGeometry />
          <meshStandardMaterial />
        </mesh>
      </group>


      <group scale={.01} position={[1.5, 5, -2]} rotation={[0, Math.PI / 2, 0]}>
        <group ref={mesh_ref} scale={.1}>

          <SpotLight
            ref={spotlight_ref}
            position={[0, 0, 0]}
            intensity={2}
            angle={0.05}
            decay={1}
            distance={1}
            color="red"
            attenuation={15}
            anglePower={15}
            target={radar1_target} // Point the spotlight at the mesh_ref
          />
          <SpotLight
            ref={spotlight_ref}
            position={[0, 0, 0]}
            intensity={2}
            angle={0.05}
            decay={1}
            distance={1}
            color="red"
            target={radar2_target} // Point the spotlight at the mesh_ref
          />

          <mesh geometry={nodes.instance_0.geometry} material={materials['Material.001']} position={[28.262, 67.724, -211.239]} />
          <mesh geometry={nodes.instance_0001.geometry} material={materials.Color_001} position={[28.429, 47.469, -54.323]} />
          <mesh geometry={nodes.instance_0002.geometry} material={materials['Material.001']} position={[31.008, 86.456, -28.153]} />
          <mesh geometry={nodes.instance_0003.geometry} material={materials.Color_001} position={[90.499, 10.86, -46.876]} />
          <mesh geometry={nodes.instance_0004.geometry} material={materials.edge_color000255} position={[-33.927, 11.194, -46.796]} />
          <mesh geometry={nodes.instance_0005.geometry} material={materials.edge_color000255} position={[87.953, 11.194, -46.796]} />
          <mesh geometry={nodes.instance_0006.geometry} material={materials.edge_color000255} position={[29.204, 8.944, 29.954]} />
          <mesh geometry={nodes.instance_0007.geometry} material={materials.Color_001} position={[28.375, 104.383, -203.456]} />
          <mesh geometry={nodes.instance_0008.geometry} material={materials.Color_001} position={[29.032, 49.474, 76.922]} />
          <mesh geometry={nodes.instance_0009.geometry} material={materials.Color_001} position={[-31, 10.75, -46.957]} />
          <mesh geometry={nodes.instance_0010.geometry} material={materials.Color_001} position={[-36.25, 10.86, -46.876]} />
          <mesh geometry={nodes.instance_0011.geometry} material={materials.Color_001} position={[-11.845, 23.106, -49.748]} />
          <mesh geometry={nodes.instance_0012.geometry} material={materials.Color_001} position={[28.897, 15.635, 29.489]} />
          <mesh geometry={nodes.instance_0013.geometry} material={materials.Color_001} position={[91.325, 56.042, -5]} />
          <mesh geometry={nodes.instance_0014.geometry} material={materials.Color_001} position={[-33.425, 56.042, -5]} />
          <mesh geometry={nodes.instance_0015.geometry} material={materials.Color_001} position={[65.871, 23.106, -49.748]} />
          <mesh geometry={nodes.instance_0016.geometry} material={materials.Color_001} position={[85.929, 10.75, -46.957]} />
        </group>
      </group>
    </group>
  )
}
